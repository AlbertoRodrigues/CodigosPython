{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ChecaString(x):\n",
    "    if not any(i.isupper() for i in x) and any(i ==\"_\" for i in x):\n",
    "        return(get_snake_case(x))\n",
    "    elif any(i.isupper() for i in x):\n",
    "        return(getCamelCase(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_snake_case(x):\n",
    "    lista = []\n",
    "    s = \"\"\n",
    "    for i in range(len(x)):\n",
    "        if i == 0:\n",
    "            s = s + x[i].upper()\n",
    "        elif x[i] == \"_\":\n",
    "            s = s\n",
    "            lista.append(i + 1)\n",
    "        elif i in lista:\n",
    "            s = s + x[i:i + 1].upper()\n",
    "        else:\n",
    "            s = s + x[i]\n",
    "    return (x, \"is a string of type snake_case and its conversion to camelCase is:\", s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def getCamelCase(x):\n",
    "    s = \"\"\n",
    "    for i in range(len(x)):\n",
    "        if i == 0:\n",
    "            s = s + x[i].lower()\n",
    "        elif x[i].isupper() and i != 0:\n",
    "            s = s + \"_\" + x[i:(i + 1)].lower()\n",
    "        else:\n",
    "            s = s + x[i]\n",
    "    return (x, \"is a string of type camelCase and its conversion to snake_case is:\", s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('next_gen_coder', 'is a string of type snake_case and its conversion to camelCase is:', 'NextGenCoder')\n",
      "('NextGenCoder', 'is a string of type camelCase and its conversion to snake_case is:', 'next_gen_coder')\n",
      "('alberto_rodrigues', 'is a string of type snake_case and its conversion to camelCase is:', 'AlbertoRodrigues')\n",
      "('albertoRodrigues', 'is a string of type camelCase and its conversion to snake_case is:', 'alberto_rodrigues')\n"
     ]
    }
   ],
   "source": [
    "print(ChecaString(\"next_gen_coder\"))\n",
    "print(ChecaString(\"NextGenCoder\"))\n",
    "print(ChecaString(\"alberto_rodrigues\"))\n",
    "print(ChecaString(\"albertoRodrigues\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
